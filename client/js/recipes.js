// JavaScript –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑ –ø–æ—à—É–∫–æ–º —á–µ—Ä–µ–∑ RegExp
document.addEventListener('DOMContentLoaded', function() {
    const recipesTableBody = document.getElementById('recipesTableBody');
    const recipesGrid = document.getElementById('recipesGrid');
    const searchInput = document.getElementById('searchInput');
    const searchBtn = document.getElementById('searchBtn');
    const tableViewBtn = document.getElementById('tableViewBtn');
    const cardViewBtn = document.getElementById('cardViewBtn');
    const recipesTable = document.getElementById('recipesTable');
    const recipesCards = document.getElementById('recipesCards');

    let allRecipes = [];

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑ —Å–µ—Ä–≤–µ—Ä–∞
    async function loadRecipes() {
        try {
            const response = await fetch('http://localhost:3000/api/recipes');
            allRecipes = await response.json();
            displayRecipes(allRecipes);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤:', error);
            // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
            allRecipes = getSampleRecipes();
            displayRecipes(allRecipes);
        }
    }

    // –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    function getSampleRecipes() {
        return [
            {
                id: "1",
                name: "–ë–æ—Ä—â —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π",
                category: "–°—É–ø–∏",
                cookingTime: "90 —Ö–≤",
                ingredients: ["–±—É—Ä—è–∫", "–∫–∞—Ä—Ç–æ–ø–ª—è", "–º–æ—Ä–∫–≤–∞", "–∫–∞–ø—É—Å—Ç–∞", "–º'—è—Å–æ", "—Å–º–µ—Ç–∞–Ω–∞"],
                instructions: "–í–∞—Ä–∏–º–æ –º'—è—Å–æ, –¥–æ–¥–∞—î–º–æ –æ–≤–æ—á—ñ, –≤–∞—Ä–∏–º–æ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ."
            },
            {
                id: "2",
                name: "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞",
                category: "–ü–∞—Å—Ç–∞",
                cookingTime: "25 —Ö–≤",
                ingredients: ["—Å–ø–∞–≥–µ—Ç—ñ", "–±–µ–∫–æ–Ω", "—è–π—Ü—è", "–ø–∞—Ä–º–µ–∑–∞–Ω", "—á–æ—Ä–Ω–∏–π –ø–µ—Ä–µ—Ü—å", "–≤–µ—Ä—à–∫–∏"],
                instructions: "–í–∞—Ä–∏–º–æ –ø–∞—Å—Ç—É, —Å–º–∞–∂–∏–º–æ –±–µ–∫–æ–Ω, –∑–º—ñ—à—É—î–º–æ –∑ —è–π—Ü—è–º–∏ —Ç–∞ —Å–∏—Ä–æ–º."
            },
            {
                id: "3",
                name: "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä",
                category: "–°–∞–ª–∞—Ç–∏",
                cookingTime: "20 —Ö–≤",
                ingredients: ["—Å–∞–ª–∞—Ç –∞–π—Å–±–µ—Ä–≥", "–∫—É—Ä–∫–∞", "–≥—Ä–µ–Ω–∫–∏", "–ø–∞—Ä–º–µ–∑–∞–Ω", "—Å–æ—É—Å –¶–µ–∑–∞—Ä", "–ø–æ–º—ñ–¥–æ—Ä–∏"],
                instructions: "–°–º–∞–∂–∏–º–æ –∫—É—Ä–∫—É, –ø—ñ–¥—Å–º–∞–∂—É—î–º–æ –≥—Ä–µ–Ω–∫–∏, –∑–º—ñ—à—É—î–º–æ –∑ —Å–∞–ª–∞—Ç–æ–º —ñ —Å–æ—É—Å–æ–º."
            },
            {
                id: "4",
                name: "–ú–ª–∏–Ω—Ü—ñ –∑ –º'—è—Å–æ–º",
                category: "–û—Å–Ω–æ–≤–Ω—ñ —Å—Ç—Ä–∞–≤–∏",
                cookingTime: "45 —Ö–≤",
                ingredients: ["–±–æ—Ä–æ—à–Ω–æ", "—è–π—Ü—è", "–º–æ–ª–æ–∫–æ", "—Ñ–∞—Ä—à", "—Ü–∏–±—É–ª—è", "—Å–º–µ—Ç–∞–Ω–∞"],
                instructions: "–ì–æ—Ç—É—î–º–æ —Ç—ñ—Å—Ç–æ, —Å–º–∞–∂–∏–º–æ –º–ª–∏–Ω—Ü—ñ, –≥–æ—Ç—É—î–º–æ –Ω–∞—á–∏–Ω–∫—É."
            },
            {
                id: "5",
                name: "–®–æ–∫–æ–ª–∞–¥–Ω–∏–π —Ç–æ—Ä—Ç",
                category: "–î–µ—Å–µ—Ä—Ç–∏",
                cookingTime: "60 —Ö–≤",
                ingredients: ["–±–æ—Ä–æ—à–Ω–æ", "–∫–∞–∫–∞–æ", "—è–π—Ü—è", "—Ü—É–∫–æ—Ä", "–≤–µ—Ä—à–∫–∏", "—à–æ–∫–æ–ª–∞–¥"],
                instructions: "–ó–º—ñ—à—É—î–º–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏, –≤–∏–ø—ñ–∫–∞—î–º–æ, –¥–µ–∫–æ—Ä—É—î–º–æ."
            }
        ];
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ
    function displayRecipesTable(recipes) {
        recipesTableBody.innerHTML = '';

        if (recipes.length === 0) {
            showNoResultsMessage('table');
            return;
        }

        recipes.forEach(recipe => {
            const row = document.createElement('tr');
            row.className = 'recipe-row';

            row.innerHTML = `
                <td>${recipe.name}</td>
                <td><span class="category-badge">${recipe.category}</span></td>
                <td>${recipe.cookingTime}</td>
                <td>
                    <button class="btn-small btn-danger" onclick="deleteRecipe('${recipe.id}')">–í–∏–¥–∞–ª–∏—Ç–∏</button>
                    <button class="btn-small btn-info" onclick="viewRecipe('${recipe.id}')">–î–µ—Ç–∞–ª—ñ</button>
                </td>
            `;

            recipesTableBody.appendChild(row);
        });
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ –∫–∞—Ä—Ç–æ–∫
    function displayRecipesCards(recipes) {
        recipesGrid.innerHTML = '';

        if (recipes.length === 0) {
            showNoResultsMessage('cards');
            return;
        }

        recipes.forEach(recipe => {
            const card = document.createElement('div');
            card.className = 'recipe-card';

            card.innerHTML = `
                <div class="recipe-card-header">
                    <h3 class="recipe-card-title">${recipe.name}</h3>
                    <span class="recipe-card-time">${recipe.cookingTime}</span>
                </div>
                <div class="recipe-card-category">${recipe.category}</div>
                <div class="recipe-card-ingredients">
                    <h4>–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:</h4>
                    <ul>
                        ${recipe.ingredients.map(ingredient => `<li>${ingredient}</li>`).slice(0, 4).join('')}
                        ${recipe.ingredients.length > 4 ? '<li>...</li>' : ''}
                    </ul>
                </div>
                <div class="recipe-card-actions">
                    <button class="btn-small btn-danger" onclick="deleteRecipe('${recipe.id}')">–í–∏–¥–∞–ª–∏—Ç–∏</button>
                    <button class="btn-small btn-info" onclick="viewRecipe('${recipe.id}')">–î–µ—Ç–∞–ª—ñ</button>
                </div>
            `;

            recipesGrid.appendChild(card);
        });
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤ (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –≤–∏–¥—É)
    function displayRecipes(recipes) {
        if (tableViewBtn.classList.contains('active')) {
            displayRecipesTable(recipes);
        } else {
            displayRecipesCards(recipes);
        }
    }

    // –ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º RegExp
    function searchRecipes() {
        const searchTerm = searchInput.value.trim();

        if (searchTerm === '') {
            displayRecipes(allRecipes);
            return;
        }

        try {
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤–∏—Ä–∞–∑—É –¥–ª—è –ø–æ—à—É–∫—É
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–ø–æ—Ä 'i' –¥–ª—è —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ—Å—Ç—Ä—É
            const regex = new RegExp(searchTerm, 'i');

            const filteredRecipes = allRecipes.filter(recipe => {
                // –ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é
                if (regex.test(recipe.name)) {
                    return true;
                }

                // –ü–æ—à—É–∫ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
                if (regex.test(recipe.category)) {
                    return true;
                }

                // –ü–æ—à—É–∫ –∑–∞ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞–º–∏
                const foundInIngredients = recipe.ingredients.some(ingredient =>
                    regex.test(ingredient)
                );

                if (foundInIngredients) {
                    return true;
                }

                return false;
            });

            // –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            const highlightedRecipes = filteredRecipes.map(recipe => {
                return {
                    ...recipe,
                    name: highlightText(recipe.name, searchTerm),
                    category: highlightText(recipe.category, searchTerm),
                    ingredients: recipe.ingredients.map(ingredient =>
                        highlightText(ingredient, searchTerm)
                    )
                };
            });

            displayRecipes(highlightedRecipes);

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤–∏—Ä–∞–∑—ñ:', error);
            // –Ø–∫—â–æ RegExp –Ω–µ–≤—ñ—Ä–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫
            simpleSearch(searchTerm);
        }
    }

    // –ü—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ (–∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)
    function simpleSearch(searchTerm) {
        const term = searchTerm.toLowerCase();

        const filteredRecipes = allRecipes.filter(recipe => {
            if (recipe.name.toLowerCase().includes(term)) return true;
            if (recipe.category.toLowerCase().includes(term)) return true;
            return recipe.ingredients.some(ingredient =>
                ingredient.toLowerCase().includes(term)
            );
        });

        displayRecipes(filteredRecipes);
    }

    // –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
    function highlightText(text, searchTerm) {
        try {
            const regex = new RegExp(`(${searchTerm})`, 'gi');
            return text.replace(regex, '<mark>$1</mark>');
        } catch (error) {
            return text;
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    function showNoResultsMessage(viewType) {
        const message = document.createElement('div');
        message.className = 'no-results';
        message.innerHTML = `
            <p>üîç –†–µ—Ü–µ–ø—Ç—ñ–≤ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p>
            <p>–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è.</p>
        `;

        if (viewType === 'table') {
            recipesTableBody.appendChild(message);
        } else {
            recipesGrid.appendChild(message);
        }
    }

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—É
    window.deleteRecipe = async function(id) {
        if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ä–µ—Ü–µ–ø—Ç?')) {
            try {
                const response = await fetch(`http://localhost:3000/api/recipes/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç—ñ–≤
                    loadRecipes();
                } else {
                    throw new Error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
                }
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—É:', error);
                // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–¥–∞–ª—è—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
                allRecipes = allRecipes.filter(recipe => recipe.id !== id);
                displayRecipes(allRecipes);
                alert('–†–µ—Ü–µ–ø—Ç –≤–∏–¥–∞–ª–µ–Ω–æ (–ª–æ–∫–∞–ª—å–Ω–æ)');
            }
        }
    };

    // –ü–µ—Ä–µ–≥–ª—è–¥ –¥–µ—Ç–∞–ª–µ–π —Ä–µ—Ü–µ–ø—Ç—É
    window.viewRecipe = function(id) {
        const recipe = allRecipes.find(r => r.id === id);
        if (recipe) {
            showRecipeDetails(recipe);
        }
    };

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–µ—Ü–µ–ø—Ç—É
    function showRecipeDetails(recipe) {
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content">
                <span class="close">&times;</span>
                <h2>${recipe.name}</h2>
                <div class="recipe-details">
                    <p><strong>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</strong> ${recipe.category}</p>
                    <p><strong>–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:</strong> ${recipe.cookingTime}</p>
                    <div class="ingredients-list">
                        <h3>–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:</h3>
                        <ul>
                            ${recipe.ingredients.map(ingredient => `<li>${ingredient}</li>`).join('')}
                        </ul>
                    </div>
                    <div class="instructions">
                        <h3>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:</h3>
                        <p>${recipe.instructions}</p>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        const closeBtn = modal.querySelector('.close');
        closeBtn.onclick = function() {
            document.body.removeChild(modal);
        };

        // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –º–æ–¥–∞–ª—å–Ω–∏–º –≤—ñ–∫–Ω–æ–º
        modal.onclick = function(event) {
            if (event.target === modal) {
                document.body.removeChild(modal);
            }
        };
    }

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    searchBtn.addEventListener('click', searchRecipes);

    searchInput.addEventListener('keyup', function(event) {
        if (event.key === 'Enter') {
            searchRecipes();
        }

        // –ü–æ—à—É–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)
        // if (searchInput.value.length >= 2 || searchInput.value.length === 0) {
        //     searchRecipes();
        // }
    });

    tableViewBtn.addEventListener('click', function() {
        tableViewBtn.classList.add('active');
        cardViewBtn.classList.remove('active');
        recipesTable.classList.remove('hidden');
        recipesCards.classList.add('hidden');
        displayRecipes(allRecipes);
    });

    cardViewBtn.addEventListener('click', function() {
        cardViewBtn.classList.add('active');
        tableViewBtn.classList.remove('active');
        recipesCards.classList.remove('hidden');
        recipesTable.classList.add('hidden');
        displayRecipes(allRecipes);
    });

    // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –ø—ñ–¥—Å–≤—ñ—Ç–∫–∏ —Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    addCustomStyles();

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    loadRecipes();
});

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤
function addCustomStyles() {
    const styles = `
        /* –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É */
        mark {
            background-color: #ffeb3b;
            padding: 2px 4px;
            border-radius: 3px;
        }
        
        /* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ */
        .modal {
            display: block;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border-radius: 10px;
            width: 80%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: black;
        }
        
        .recipe-details {
            margin-top: 20px;
        }
        
        .ingredients-list ul, .instructions p {
            margin-left: 20px;
        }
        
        /* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ */
        .no-results {
            text-align: center;
            padding: 3rem;
            color: #666;
            font-style: italic;
            grid-column: 1 / -1;
        }
        
        .no-results p {
            margin: 10px 0;
        }
        
        /* –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤ —Ç–∞–±–ª–∏—Ü—ñ */
        .category-badge {
            background: #e74c3c;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
        }
        
        /* –ö–Ω–æ–ø–∫–∏ */
        .btn-info {
            background: #3498db;
            color: white;
        }
        
        .btn-small {
            padding: 5px 10px;
            margin: 2px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
        }
    `;

    const styleSheet = document.createElement('style');
    styleSheet.textContent = styles;
    document.head.appendChild(styleSheet);
}